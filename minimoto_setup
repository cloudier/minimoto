#!/usr/bin/python3

"""
- Since the setup program must perform a lot of work, the program may take a
long time to run. However, if it takes more than 10 minutes, please note this
and explain the reasons in your DESIGN doc.
"""

# TODO check failure

import os
import sys
import time
import boto3
import pickle
import subprocess

from minimoto_constants import *


def start_instance(ec2, filename, keyname, userdata, arn):
    with open(userdata, "r") as userdatafile:
        instances = ec2.create_instances(
            ImageId="ami-96666ff5",
            MinCount=1,
            MaxCount=1,
            InstanceType="t2.small",
            KeyName=keyname,
            SecurityGroups=[SECURITY_GROUP_NAME],
            UserData=userdatafile.read(),
            IamInstanceProfile={"Arn": arn}
        )
    return instances[0]


def setup_instance(instance, files, keyfile):
    instance.reload()
    instance_url = instance.public_dns_name

    # Upload necessary files
    for filename in files:
        print("Uploading " + filename)

        subprocess.check_call(["scp", "-o", "StrictHostKeyChecking no", "-i",
                               keyfile, filename,
                               "%s@%s:/home/%s/" % (USER, instance_url, USER)])


def write_to_pickle(d):
    with open(MINIMOTO_PICKLE_FILE, "wb") as handle:
        pickle.dump(d, handle)


def main():
    if len(sys.argv) < 4:
        print("Not enough arguments")
        exit(1)
    keyfile = sys.argv[1]
    aws_access_key_id = sys.argv[2]
    aws_secret_access_key = sys.argv[3]

    minimoto_info = {}

    print("Setting keys and region")
    subprocess.run(["aws", "configure", "set", "aws_access_key_id",
                    aws_access_key_id])
    subprocess.run(["aws", "configure", "set", "aws_secret_access_key",
                    aws_secret_access_key])
    subprocess.run(["aws", "configure", "set", "region", "ap-southeast-2"])

    print("Get boto3 clients")
    sqs = boto3.resource("sqs")
    s3 = boto3.resource("s3")
    ec2 = boto3.resource("ec2")
    iam = boto3.resource("iam")

    print("Creating IAM role and instance profile")
    with open(IAM_TRUST_POLICY, "r") as h:
        document = h.read().replace("\n", "")
        try:
            role = iam.create_role(RoleName=IAM_ROLE_NAME,
                                   AssumeRolePolicyDocument=document)
            role.attach_policy(PolicyArn="arn:aws:iam::aws:policy/AmazonEC2FullAccess")
            role.attach_policy(PolicyArn="arn:aws:iam::aws:policy/AmazonSQSFullAccess")
            role.attach_policy(PolicyArn="arn:aws:iam::aws:policy/AmazonS3FullAccess")
            ip = iam.create_instance_profile(InstanceProfileName=IAM_PROFILE_NAME)
            ip.add_role(RoleName=role.name)
            arn = ip.arn
            print(arn)
        except boto3.exceptions.botocore.errorfactory.ClientError as e:
            if e.response["Error"]["Code"] == "EntityAlreadyExists":
                print("Role already exists")
                arn = iam.InstanceProfile(IAM_PROFILE_NAME).arn
            else:
                raise

    print("Creating SQS queue")
    queue = sqs.create_queue(
        QueueName=TRANSCODING_REQUESTS_QUEUE_NAME,
        Attributes={"VisibilityTimeout": "30"})
    minimoto_info["queue_url"] = queue.url
    write_to_pickle(minimoto_info)

    print("Creating input S3 bucket")
    try:
        s3.create_bucket(Bucket=INPUT_BUCKET_NAME,
                         CreateBucketConfiguration={
                            "LocationConstraint": "ap-southeast-2"
                         })
    except boto3.exceptions.botocore.errorfactory.ClientError as e:
        if e.response["Error"]["Code"] == "BucketAlreadyOwnedByYou":
            print("Bucket already exists")
        else:
            raise
    input_bucket_url = "s3://" + INPUT_BUCKET_NAME

    print("Creating output S3 bucket")
    try:
        s3.create_bucket(Bucket=OUTPUT_BUCKET_NAME,
                         CreateBucketConfiguration={
                            "LocationConstraint": "ap-southeast-2"
                         })
    except boto3.exceptions.botocore.errorfactory.ClientError as e:
        if e.response["Error"]["Code"] == "BucketAlreadyOwnedByYou":
            print("Bucket already exists")
        else:
            raise
    output_bucket_url = "s3://" + OUTPUT_BUCKET_NAME

    print("Importing the key pair")
    keyname = os.path.basename(keyfile)[:-4]
    material = subprocess.check_output(["ssh-keygen", "-y", "-f", keyfile])
    try:
        ec2.import_key_pair(
            KeyName=keyname,
            PublicKeyMaterial=material
        )
    except boto3.exceptions.botocore.errorfactory.ClientError as e:
        if e.response["Error"]["Code"] == "InvalidKeyPair.Duplicate":
            print("Key pair already exists")
        else:
            raise

    print("Creating a security group that allows ssh access")
    try:
        security_group = ec2.create_security_group(
            GroupName=SECURITY_GROUP_NAME,
            Description="ssh access"
        )

        security_group.authorize_ingress(
            IpProtocol="TCP",
            FromPort=22,
            ToPort=22,
            CidrIp='0.0.0.0/0'
        )
    except boto3.exceptions.botocore.errorfactory.ClientError as e:
        if e.response["Error"]["Code"] == "InvalidGroup.Duplicate":
            print("Security group already exists")
        else:
            raise

    # TODO poll get_instance_profile until it has the correct roles
    print("Waiting until instance profile has correct roles")
    time.sleep(10)

    print("Starting EC2 client instance")
    client_instance = start_instance(ec2, "minimoto_client", keyname,
                                     "minimoto_default_userdata", arn)

    print("Starting EC2 watchdog instance")
    watchdog_instance = start_instance(ec2, "minimoto_watchdog", keyname,
                                       "minimoto_default_userdata", arn)

    print("Starting EC2 service instance")
    service_instance = start_instance(ec2, "minimoto_service", keyname,
                                      "minimoto_service_userdata", arn)

    print("Waiting until instances OK")
    # This should wait until the init script for all instances has finished
    waiter = boto3.client('ec2').get_waiter("instance_status_ok")
    waiter.wait(InstanceIds=[
        client_instance.id,
        watchdog_instance.id,
        service_instance.id,
    ])

    print("Setting up EC2 client instance")
    setup_instance(client_instance,
                   ["minimoto_client", "minimoto_constants.py"],
                   keyfile)
    client_url = client_instance.public_dns_name
    minimoto_info["client_instance_id"] = client_instance.id
    write_to_pickle(minimoto_info)

    print("Setting up EC2 watchdog instance")
    setup_instance(watchdog_instance,
                   ["minimoto_watchdog", "minimoto_constants.py"],
                   keyfile)
    watchdog_url = watchdog_instance.public_dns_name
    minimoto_info["watchdog_instance_id"] = watchdog_instance.id
    write_to_pickle(minimoto_info)

    print("Setting up EC2 service instance")
    setup_instance(service_instance,
                   ["minimoto_service", "img2video", "minimoto_constants.py"],
                   keyfile)
    minimoto_info["service_instance_id"] = service_instance.id
    write_to_pickle(minimoto_info)

    print("Creating AMI from EC2 service instance for watchdog")
    service_ami = service_instance.create_image(Name=SERVICE_AMI_NAME)
    service_ami.wait_until_exists(Filters=[
        {
            "Name": "state",
            "Values": [
                "available",
            ]
        },
    ])
    minimoto_info["image_id"] = service_ami.id
    write_to_pickle(minimoto_info)
    waiter.wait(InstanceIds=[service_instance.id])

    print("minimoto_setup: mandatory output messages follow:")
    print("S3_BUCKET_INPUT={}".format(input_bucket_url))    # the S3 URL of the input bucket
    print("S3_BUCKET_OUTPUT={}".format(output_bucket_url))  # the S3 URL of the output bucket
    print("CLIENT_USER={}".format(USER))                    # the user name used to log in to the client EC2 instance
    print("CLIENT_ADDR={}".format(client_url))              # the address of the client EC2 instance
    print("WATCHDOG_USER={}".format(USER))                  # the user name used to log in to the watchdog EC2 instance
    print("WATCHDOG_ADDR={}".format(watchdog_url))          # the address of the watchdog EC2 instance
    print("SERVICE_USER={}".format(USER))                   # the user name used to log in to a service EC2 instance
    print("SERVICE_AMI={}".format(service_ami.id))          # the ID of the AMI used for service instances


if __name__ == "__main__":
    main()
