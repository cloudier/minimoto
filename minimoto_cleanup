#!/usr/bin/python3

import boto3
import pickle

from minimoto_constants import *


def deleteBucket(s3, bucket_name):
    try:
        bucket = s3.Bucket(bucket_name)
        bucket.objects.all().delete()
        bucket.delete()
    except Exception as e:
        print(e)

def terminateInstance(ec2, instance_id):
    try:
        ec2.terminate_instances(InstanceIds=[instance_id])
    except Exception as e:
        print(e)


def main():
    print("Load pickle file")
    with open(MINIMOTO_PICKLE_FILE, "rb") as pickle_handle:
        minimoto_info = pickle.load(pickle_handle)

        print("Get boto3 resources")
        sqs = boto3.client("sqs")
        s3 = boto3.resource("s3")
        ec2 = boto3.client("ec2")
        iam = boto3.resource('iam')

        print("Deleting SQS queue")
        try:
            sqs.delete_queue(QueueUrl=minimoto_info["queue_url"])
        except Exception as e:
            print(e)

        print("Deleting S3 input bucket")
        deleteBucket(s3, INPUT_BUCKET_NAME)

        print("Deleting S3 output bucket")
        deleteBucket(s3, OUTPUT_BUCKET_NAME)

        print("Terminating client instance")
        if "client_instance_id" in minimoto_info:
            terminateInstance(ec2, minimoto_info["client_instance_id"])

        print("Terminating watchdog instance")
        if "watchdog_instance_id" in minimoto_info:
            terminateInstance(ec2, minimoto_info["watchdog_instance_id"])

        print("Terminating original service instance")
        if "service_instance_id" in minimoto_info:
            terminateInstance(ec2, minimoto_info["service_instance_id"])

        print("Terminating new service instances")
        try:
            service_instances = ec2.describe_instances(
                Filters=[{"Name": "image-id", "Values": [minimoto_info["image_id"]]}])
            for reservation in service_instances["Reservations"]:
                for instance in reservation["Instances"]:
                    terminateInstance(ec2, instance["InstanceId"])
        except Exception as e:
            print(e)

        print("Deregistering service AMI and deleting snapshot")
        try:
            response = ec2.describe_images(ImageIds=[minimoto_info["image_id"]])
            image = response["Images"][0]
            snapshotId = image["BlockDeviceMappings"][0]["Ebs"]["SnapshotId"]
            ec2.deregister_image(ImageId=minimoto_info["image_id"])
            ec2.delete_snapshot(SnapshotId=snapshotId)
        except Exception as e:
            print(e)

        try:
            print("Waiting for instances to terminate")
            waiter = boto3.client('ec2').get_waiter("instance_terminated")
            waiter.wait(InstanceIds=[
                minimoto_info["client_instance_id"],
                minimoto_info["watchdog_instance_id"],
                minimoto_info["service_instance_id"]
            ])
            print("Deleting security group")
            ec2.delete_security_group(GroupName=SECURITY_GROUP_NAME)
        except Exception as e:
            print(e)

        print("Deleting IAM instance profile")
        try:
            ip = iam.InstanceProfile(IAM_PROFILE_NAME)
            for role in ip.roles:
                ip.remove_role(RoleName=role.role_name)
            ip.delete()
        except Exception as e:
            print(e)

        print("Deleting IAM role")
        try:
            role = iam.Role(IAM_ROLE_NAME)
            for policy in role.attached_policies.all():
                role.detach_policy(PolicyArn=policy.arn)
            role.delete()
        except Exception as e:
            print(e)


if __name__ == "__main__":
    main()
