#!/usr/bin/python3

import sys
import glob
import boto3
import datetime
import operator
import subprocess

from minimoto_constants import *

MSG_THRESHOLD = 5
IDLE_THRESHOLD = 10


def start_instances(ec2, keyfile, ami, arn, num_instances):
    instances = []
    while len(instances) < num_instances:
        ec2r = boto3.resource("ec2", region_name="ap-southeast-2")
        ci_response = ec2r.create_instances(
            ImageId=ami,
            MinCount=1,
            MaxCount=1,
            InstanceType="m4.large",
            KeyName=keyfile[:-4],
            SecurityGroups=[SECURITY_GROUP_NAME],
            IamInstanceProfile={"Arn": arn},
            TagSpecifications=[{
                "ResourceType": "instance",
                "Tags": [{"Key": INSTANCE_TAG_NAME,
                          "Value": INSTANCE_TAG_VALUE}]
            }]
        )
        instances.append(ci_response[0].id)

    # Wait until instance is set up
    print("Waiting for instances to be set up...")
    waiter = ec2.get_waiter("instance_status_ok")
    waiter.wait(InstanceIds=instances)


def get_cpu_util(metric, instance, start, end):
    # Get average over last 5 minutes
    metric_response = metric.get_statistics(
        Dimensions=[{"Name": "InstanceId",
                     "Value": instance["InstanceId"]}],
        StartTime=start, EndTime=end,
        Unit="Percent",
        Period=300,
        Statistics=["Average"])
    sorted_points = sorted(metric_response["Datapoints"],
                           key=operator.itemgetter("Timestamp"))
    if len(sorted_points) == 0:
        return 0
    last_point = sorted_points[-1]
    return last_point["Average"]


def main():
    print("Getting boto3 resources")
    sqs = boto3.resource("sqs", region_name="ap-southeast-2")
    ec2 = boto3.client("ec2", region_name="ap-southeast-2")
    iam = boto3.client("iam", region_name="ap-southeast-2")
    cloudwatch = boto3.resource("cloudwatch", region_name="ap-southeast-2")

    print("Finding the number of messages in the queue...")
    queue = sqs.get_queue_by_name(QueueName=TRANSCODING_REQUESTS_QUEUE_NAME)
    messages_in_queue = int(queue.attributes["ApproximateNumberOfMessages"])

    print("Getting information about current instances...")
    service_instances = []
    di_response = ec2.describe_instances(
        Filters=[{"Name": "tag:{}".format(INSTANCE_TAG_NAME),
                  "Values": [INSTANCE_TAG_VALUE]}])
    for reservation in di_response["Reservations"]:
        for instance in reservation["Instances"]:
            if instance["State"]["Name"] == "running":
                service_instances.append(instance)

    if len(sys.argv) == 2 and sys.argv[1] == "--status":
        print("Getting status...")
        total_utilisation = 0
        metric = cloudwatch.Metric("AWS/EC2", "CPUUtilization")
        now = datetime.datetime.utcnow()
        start = now - datetime.timedelta(minutes=10)
        end = now + datetime.timedelta(minutes=10)
        for instance in service_instances:
            instance_utilisation = get_cpu_util(metric, instance, start, end)
            print("instance: {instance_id} {status} {:.0f}%"
                  .format(instance_utilisation,
                          instance_id=instance["InstanceId"],
                          status=instance["State"]["Name"]))
            total_utilisation += instance_utilisation
        if len(service_instances) > 0:
            avg_util = total_utilisation / len(service_instances)
        else:
            avg_util = 0
        print("average utilisation: {:.0f}%".format(avg_util))
        print("queue length: {}".format(messages_in_queue))
    else:
        print("There are {} messages in the queue".format(messages_in_queue))
        if messages_in_queue > MSG_THRESHOLD or (
                messages_in_queue > 0 and len(service_instances) == 0):
            instances_to_start = (messages_in_queue // MSG_THRESHOLD
                - len(service_instances))
            if instances_to_start <= 0:
                print("Not starting any new instances")
                return
            keyfile = glob.glob("*.pem")[0]
            arn = iam.get_instance_profile(
                InstanceProfileName=IAM_PROFILE_NAME)["InstanceProfile"]["Arn"]
            dim_response = ec2.describe_images(
                Filters=[{"Name": "name",
                          "Values": [SERVICE_AMI_NAME]}])
            ami = dim_response["Images"][0]["ImageId"]
            print("Starting {} instance(s)".format(instances_to_start))
            start_instances(ec2, keyfile, ami, arn, instances_to_start)
        elif messages_in_queue < MSG_THRESHOLD:
            print("Queue is almost empty, checking for idle instances...")
            metric = cloudwatch.Metric("AWS/EC2", "CPUUtilization")
            now = datetime.datetime.utcnow()
            start = now - datetime.timedelta(minutes=10)
            end = now + datetime.timedelta(minutes=10)
            for instance in service_instances:
                instance_utilisation = get_cpu_util(
                    metric, instance, start, end)
                instance_ut = datetime.datetime.now(datetime.timezone.utc) - instance["LaunchTime"]
                instance_ut_mins = instance_ut.total_seconds() / 60
                iid = instance["InstanceId"]
                if (instance_ut_mins % 60) < 50:
                    # Ignore instance if we are not near the end of a billing
                    # cycle
                    print("Not killing instance {}, too far from end of billing cycle".format(iid))
                    continue
                if instance_utilisation < IDLE_THRESHOLD:
                    print("Killing instance {}".format(iid))
                    ec2.terminate_instances(InstanceIds=[iid])


if __name__ == "__main__":
    main()
