#!/usr/bin/python3

import os
import boto3
import shutil
import subprocess

from minimoto_constants import *

RUNNING_FILE_NAME = "MINIMOTO_SERVICE_RUNNING"
LOCAL_IMAGES_DIR = "images_dir"
LOCAL_VIDEO_FILE = "video_file.mp4"


def main():
    # Log to minimoto.log
    print("minimoto service starting")

    # If the instance is still processing the previous request, do nothing and
    # exit.
    if os.path.exists(RUNNING_FILE_NAME):
        print("minimoto service still running, exiting")
        return

    running_file = open(RUNNING_FILE_NAME, "w+")
    running_file.close()

    # Pull a request from an SQS queue. If no request is found, do nothing and
    # exit.
    print("Trying to get a request from queue")
    s3 = boto3.resource("s3", region_name="ap-southeast-2")
    sqs = boto3.resource("sqs", region_name="ap-southeast-2")
    queue = sqs.get_queue_by_name(QueueName=TRANSCODING_REQUESTS_QUEUE_NAME)
    messages = queue.receive_messages()

    if len(messages) == 0:
        print("No messages in queue, exiting")
        os.remove(RUNNING_FILE_NAME)
        return

    message = messages[0]
    s3_dirname = message.body

    print("Processing message to create %s.mp4" % s3_dirname)

    # Download all images from the S3 bucket specified in the request
    # (e.g., au.edu.unsw.cs9243.input/sample_images_xyz).
    subprocess.run(["aws", "--region", "ap-southeast-2", "s3", "sync",
                    "s3://%s/%s" % (INPUT_BUCKET_NAME, s3_dirname),
                    LOCAL_IMAGES_DIR])

    # Convert a series of images to an MP4 video using avconv (it is up to you
    # how you order the images, but ordering based on filename would be
    # sufficient).
    try:
        subprocess.check_call(["./img2video", LOCAL_IMAGES_DIR,
                               LOCAL_VIDEO_FILE])
    except Exception as e:
        print("img2video failed")
        shutil.rmtree(LOCAL_IMAGES_DIR)
        os.remove(LOCAL_VIDEO_FILE)
        os.remove(RUNNING_FILE_NAME)
        return

    # Upload the MP4 video to the S3 bucket specified in the request
    # (e.g., au.edu.unsw.cs9243.output).
    output_bucket = s3.Bucket(OUTPUT_BUCKET_NAME)
    output_bucket.upload_file(LOCAL_VIDEO_FILE, s3_dirname + ".mp4")

    # Delete images from input bucket.
    subprocess.run(["aws", "--region", "ap-southeast-2", "s3", "rm",
                    "s3://%s/%s" % (INPUT_BUCKET_NAME, s3_dirname),
                    "--recursive"])

    # Delete processed message from queue.
    message.delete()

    shutil.rmtree(LOCAL_IMAGES_DIR)
    os.remove(LOCAL_VIDEO_FILE)
    os.remove(RUNNING_FILE_NAME)


if __name__ == "__main__":
    try:
        main()
    except Exception:
        os.remove(RUNNING_FILE_NAME)
